#! /usr/bin/python
# -*- coding: iso-8859-15 -*-
#
__author__='atareao'
__date__ ='$07/10/2010'
#
# <one line to give the program's name and a brief idea of what it does.>
#
# Copyright (C) 2010 Lorenzo Carbonell
# lorenzo.carbonell.cerezo@gmail.com
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
#

import os
import sys	
import shlex
import subprocess
import glob
import shutil
import stat
import ConfigParser
from time import gmtime, strftime, localtime
########################################################################
MAIN_DIR = os.getcwd()
DEBIAN_DIR = os.path.join(MAIN_DIR,'debian')
LANGUAGES_DIR = os.path.join(MAIN_DIR,'template1')
SRC_DIR = os.path.join(MAIN_DIR,'src')
#
CONFIGURATION = os.path.join(MAIN_DIR,'build.cfg')
#
config = ConfigParser.ConfigParser()
config.read(CONFIGURATION)
#
APP = config.get('Definitions', 'app', '')
APPNAME = APP.title()
VERSION = config.get('Definitions', 'version', '')
CHANGES = config.get('Definitions', 'changes', '')
TEMPLATE = os.path.join(LANGUAGES_DIR,'template1.pot')
ICON = os.path.join('Definitions','icon','')
CATEGORIES = os.path.join('Definitions','categories','')
#
AUTHOR = config.get('Definitions', 'author', '')
AUTHOR_EMAIL = config.get('Definitions', 'author_email', '')
GPGKEY = config.get('Definitions', 'gpgkey', '')
PPA = config.get('Definitions', 'ppa', '')
SECTION = config.get('Definitions', 'section', '')
PRIORITY = config.get('Definitions', 'priority', '')
ARCHITECTURE = config.get('Definitions', 'architecture', '')
DEPENDS = config.get('Definitions', 'depends', '')
DESCRIPTION = config.get('Definitions', 'description', '')
HOMEPAGE = config.get('Definitions', 'homepage', '')
########################################################################
def ejecuta(comando):
	print ('Ejecutando... %s'%comando)
	args = shlex.split(comando)
	p = subprocess.Popen(args, bufsize=10000, stdout=subprocess.PIPE)
	valor = p.communicate()[0]
	return valor
########################################################################
def list_src():
	file_txt = os.path.join(MAIN_DIR,'files.txt')
	f = open(file_txt,'w')
	for file in glob.glob(os.path.join(SRC_DIR,'*.py')):
		f.write('%s\n'%file)
	f.close()
	return file_txt

def list_languages():
	lans = []
	file_txt =os.path.join(LANGUAGES_DIR,'languages.txt')
	if os.path.exists(file_txt)==True:
		f = open(file_txt,'r')
		for linea in f.readlines():
			lan = linea[:-1]
			print lan
			lans.append(lan)
		f.close()
	for file in glob.glob(os.path.join(LANGUAGES_DIR,'*.po')):
		lan = os.path.splitext(os.path.basename(file))[0]
		if lan not in lans:
			lans.append(lan)
	f = open(file_txt,'w')
	for lan in lans:
		f.write('%s\n'%lan)
	f.close()
	return file_txt

def update_translations():
	file_txt =os.path.join(LANGUAGES_DIR,'languages.txt')
	f = open(file_txt,'r')
	for file in f.readlines():
		lan = file[:-1]
		file = os.path.join(LANGUAGES_DIR,lan+'.po')
		print '############################################################'
		print lan
		print '############################################################'
		if os.path.exists(file):
			command = 'msgmerge -U %s %s'%(file,TEMPLATE)
		else:
			command = 'msginit --output-file=%s --input=%s --locale=%s'%(file,TEMPLATE,lan)
		print ejecuta(command)
		edit_language_file(file)
	f.close()
	
def edit_language_file(file):
	fr = open(file,'r')
	file_out = file+'.new'
	fs = open(file_out,'w')
	for line in fr.readlines():
		if line.find('Project-Id-Version:')!=-1:
			line = '"Project-Id-Version: %s %s\\n"\n'%(APP,VERSION)
		elif line.find('Content-Type:')!=-1:
			line = '"Content-Type: text/plain; charset=UTF-8\\n"\n'
		fs.write(line)
	fs.close()
	fr.close()
	shutil.move(file_out,file)
	
def remove_security_copies():
	for file in glob.glob(os.path.join(LANGUAGES_DIR,'*.po~')):
		os.remove(file)
########################################################################		
def remove_files(dir,ext):
	files = []
	for file in glob.glob(os.path.join(dir,'*')):
		if file != None and os.path.exists(file):
			if os.path.isdir(file):
				files.extend(list_files_to_package(file))
			else:
				files.append(file)
	for file in files:
		if os.path.splitext(file)[1] == ext:
			os.remove(file)


def remove_compiled_files(dir):
	remove_files(dir,'.pyc')

def remove_languages_saved_files(dir):
	remove_files(dir,'.po~')

def list_directories_to_package(dir):
	files = []
	for file in glob.glob(os.path.join(dir,'*')):
		if file != None and os.path.exists(file):
			if os.path.isdir(file)==True:
				files.append(file)
				files.extend(list_directories_to_package(file))
	return files
	
def list_files_to_package(dir):
	files = []
	for file in glob.glob(os.path.join(dir,'*')):
		if file != None and os.path.exists(file):
			if os.path.isdir(file):
				files.extend(list_files_to_package(file))
			else:
				files.append(file)
	return files

def create_temporal_file(dir):
	temp_file = os.path.join(MAIN_DIR,'temp_files.txt')
	f = open(temp_file,'w')
	for file in list_files_to_package(dir):
		f.write('%s\n'%file)
	f.close()
	return temp_file
			
def create_tar_gz():
	tar_gz = os.path.join(MAIN_DIR,APP+'_'+VERSION+'.orig.tar.gz')
	if os.path.exists(tar_gz):
		os.remove(tar_gz)
	command = 'tar -c -v -z --exclude src/.bzr* -f %s src/ template1/'%(tar_gz)
	print ejecuta(command)
	
def edit_changelog(file):
	fr = open(file,'r')
	texto = fr.read()
	fr.close()
	if texto.find(('%s (%s-1ubuntu1) natty; urgency=low\n')%(APP,VERSION))==-1:
		file_temp = file+'.temp'
		fr = open(file,'r')
		fs = open(file_temp,'w')
		fs.write(('%s (%s-1ubuntu1) natty; urgency=low\n')%(APP,VERSION))
		fs.write('\n')
		for line in CHANGES.split('|'):
			fs.write('  * %s\n'%line)
		fs.write('\n')
		h = str(localtime().tm_hour-gmtime().tm_hour)
		m = str(localtime().tm_min-gmtime().tm_min)	
		h = '0'*(2-len(h))+h
		m = '0'*(2-len(m))+m
		fs.write((' -- %s <%s>  %s +%s\n')%(AUTHOR,AUTHOR_EMAIL,strftime("%a, %d %b %Y %H:%M:%S", gmtime()),h+m))
		fs.write('\n')
		for line in fr.readlines():
			fs.write(line)
		fr.close()
		fs.close()
		os.remove(file)
		shutil.copy(file_temp,file)
		os.remove(file_temp)

def edit_rules(file):
	file_temp = file+'.temp'
	fr = open(file,'r')
	fs = open(file_temp,'w')
	#
	lineas = fr.readlines()
	i =0
	while (i < len(lineas)):
		linea = lineas[i]
		if linea == '\t# Create directories and copy files\n':
			fs.write(linea)
			file_build = os.path.join(MAIN_DIR,'build.mkr')
			fb = open(file_build,'r')
			for ln in fb.readlines():
				ln = ln.replace('{MOUNT_DIR}','${CURDIR}/debian/%s'%APP)
				fs.write('\t%s'%ln)
			fb.close()
			while(linea!= '\t# End create directories and copy files\n'):
				i+=1
				linea = lineas[i]
			fs.write(linea)				
		elif linea == '\t# Create languages directories\n':
			fs.write(linea)
			file_txt =os.path.join(LANGUAGES_DIR,'languages.txt')
			f = open(file_txt,'r')
			for lan in f.readlines():
				lan = lan[:-1]
				fs.write('\tmkdir -p ${CURDIR}/debian/%s/usr/share/locale-langpack/%s/LC_MESSAGES\n'%(APP,lan))
			f.close()
			while(linea!= '\t# End create languages directories\n'):
				i+=1
				linea = lineas[i]
			fs.write(linea)	
		elif linea =='\t# Compile languages\n':
			fs.write(linea)
			file_txt =os.path.join(LANGUAGES_DIR,'languages.txt')
			f = open(file_txt,'r')
			for lan in f.readlines():
				lan = lan[:-1]
				fs.write('\tmsgfmt template1/%s.po -o ${CURDIR}/debian/%s/usr/share/locale-langpack/%s/LC_MESSAGES/%s.mo\n'%(lan,APP,lan,APP))
			f.close()
			while(linea!= '\t# End comile languages\n'):
				i+=1
				linea = lineas[i]
			fs.write(linea)	
		else:
			fs.write(linea)
		i+=1
	#
	fr.close()
	fs.close()
	os.remove(file)
	shutil.copy(file_temp,file)
	os.remove(file_temp)	

def create_package():
	folder = os.path.join(MAIN_DIR,APP+'-'+VERSION)
	folder_debian = os.path.join(folder,'debian')
	delete_it(folder)
	os.makedirs(folder)
	os.makedirs(folder_debian)
	create_compat(os.path.join(folder_debian,'compat'))
	create_copyright(os.path.join(folder_debian,'copyright'))
	edit_changelog(os.path.join(MAIN_DIR,'changelog'))
	shutil.copy(os.path.join(MAIN_DIR,'changelog'),os.path.join(folder_debian,'changelog'))
	edit_mkr()
	create_rules(os.path.join(folder_debian,'rules'))
	#create_control(os.path.join(folder_debian,'control'))
	create_control_launchpad(os.path.join(folder_debian,'control'))

def update_changelog_and_rules():
	folder = os.path.join(MAIN_DIR,APP+'-'+VERSION)
	folder_debian = os.path.join(folder,'debian')
	chg_org = os.path.join(folder_debian,'changelog')
	chg_dst = os.path.join(DEBIAN_DIR,'changelog')
	shutil.copy(chg_org,chg_dst)
	rul_org = os.path.join(folder_debian,'rules')
	rul_dst = os.path.join(DEBIAN_DIR,'rules')
	shutil.copy(rul_org,rul_dst)

def debuild():
	folder = os.path.join(MAIN_DIR,APP+'-'+VERSION)
	curdir = os.getcwd()
	os.chdir(folder)
	command = 'debuild -S -k%s'%GPGKEY
	print ejecuta(command)
	os.chdir(curdir)
	
def dput():
	changes = os.path.join(MAIN_DIR,APP+'_'+VERSION+'-1ubuntu1_source.changes')
	if os.path.exists(changes):
		command = 'dput %s %s'%(PPA,changes)
		print ejecuta(command)
	else:
		print 'File %s not exists'%changes

def create_copyright(file):
	if os.path.exists(file):
		os.remove(file)
	f = open(file,'w')
	h = str(localtime().tm_hour-gmtime().tm_hour)
	m = str(localtime().tm_min-gmtime().tm_min)	
	h = '0'*(2-len(h))+h
	m = '0'*(2-len(m))+m	
	f.write('This work was packaged for Debian by:\n')
	f.write('\n')
	f.write('\t%s <%s> on %s +%s\n'%(AUTHOR,AUTHOR_EMAIL,strftime("%a, %d %b %Y %H:%M:%S", gmtime()),h+m))
	f.write('\n')
	f.write('It was downloaded from:\n')
	f.write('\n')
	f.write('\t%s\n'%HOMEPAGE)
	f.write('\n')
	f.write('Upstream Author(s):\n')
	f.write('\n')
	f.write('\t%s <%s>\n'%(AUTHOR,AUTHOR_EMAIL))
	f.write('\n')
	f.write('Copyright:\n')
	f.write('\n')
	f.write('\t<Copyright (C) %s %s <%s>>\n'%(strftime('%Y', gmtime()),AUTHOR,AUTHOR_EMAIL))
	f.write('\n')
	f.write('License:\n')
	f.write('\n')
	f.write('\tThis program is free software: you can redistribute it and/or modify\n')
	f.write('\tit under the terms of the GNU General Public License as published by\n')
	f.write('\tthe Free Software Foundation, either version 3 of the License, or\n')
	f.write('\t(at your option) any later version.\n')
	f.write('\n')
	f.write('\tThis package is distributed in the hope that it will be useful,\n')
	f.write('\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n')
	f.write('\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n')
	f.write('\tGNU General Public License for more details.\n')
	f.write('\n')
	f.write('\tYou should have received a copy of the GNU General Public License\n')
	f.write('\talong with this program.  If not, see <http://www.gnu.org/licenses/>.\n')
	f.write('\n')
	f.write('On Debian systems, the complete text of the GNU General\n')
	f.write('Public License version 3 can be found in `/usr/share/common-licenses/GPL-3`.\n')
	f.write('\n')
	f.write('The Debian packaging is:\n')
	f.write('\n')
	f.write('\t<Copyright (C) %s %s <%s>>\n'%(strftime('%Y', gmtime()),AUTHOR,AUTHOR_EMAIL))
	f.write('\n')
	f.write('# Please chose a license for your packaging work. If the program you package\n')
	f.write('# uses a mainstream license, using the same license is the safest choice.\n')
	f.write('# Please avoid to pick license terms that are more restrictive than the\n')
	f.write('# packaged work, as it may make Debian`s contributions unacceptable upstream.\n')
	f.write('# If you just want it to be GPL version 3, leave the following line in.\n')
	f.write('\n')
	f.write('and is licensed under the GPL version 3, see above.\n')
	f.write('\n')
	f.write('# Please also look if there are files or directories which have a\n')
	f.write('# different copyright/license attached and list them here.\n')
	f.close()	
	
def create_rules(file):
	if os.path.exists(file):
		os.remove(file)
	f = open(file,'w')
	f.write('#!/usr/bin/make -f\n')
	f.write('# -*- makefile -*-\n')
	f.write('# Sample debian/rules that uses debhelper.\n')
	f.write('#\n')
	f.write('# This file was originally written by Joey Hess and Craig Small.\n')
	f.write('# As a special exception, when this file is copied by dh-make into a\n')
	f.write('# dh-make output file, you may use that output file without restriction.\n')
	f.write('# This special exception was added by Craig Small in version 0.37 of dh-make.\n')
	f.write('#\n')
	f.write('# Modified to make a template file for a multi-binary package with separated\n')
	f.write('# build-arch and build-indep targets  by Bill Allombert 2001\n')
	f.write('\n')
	f.write('# Uncomment this to turn on verbose mode.\n')
	f.write('#export DH_VERBOSE=1\n')
	f.write('\n')
	f.write('# This has to be exported to make some magic below work.\n')
	f.write('configure: configure-stamp\n')
	f.write('configure-stamp:\n')
	f.write('\tdh_testdir\n')
	f.write('\t# Add here commands to configure the package.\n')
	f.write('\ttouch configure-stamp\n')
	f.write('build: build-stamp\n')
	f.write('build-stamp: configure-stamp\n')
	f.write('\tdh_testdir\n')
	f.write('\ttouch build-stamp\n')
	f.write('clean:\n')
	f.write('\tdh_testdir\n')
	f.write('\tdh_testroot\n')
	f.write('\trm -f build-stamp configure-stamp\n')
	f.write('\tdh_clean\n')
	f.write('install: build\n')
	f.write('\tdh_testdir\n')
	f.write('\tdh_testroot\n')
	f.write('\tdh_clean -k\n')
	f.write('\tdh_installdirs\n')
	####################################################################
	f.write('\t# Create directories and copy files\n')
	file_build = os.path.join(MAIN_DIR,'build.mkr')
	fb = open(file_build,'r')
	for ln in fb.readlines():
		ln = ln.replace('{MOUNT_DIR}','${CURDIR}/debian/%s'%APP)
		f.write('\t%s'%ln)
	fb.close()
	f.write('\t# End create directories and copy files\n')
	####################################################################
	f.write('\t# Create languages directories\n')
	file_txt =os.path.join(LANGUAGES_DIR,'languages.txt')
	fl = open(file_txt,'r')
	for lan in fl.readlines():
		lan = lan[:-1]
		f.write('\tmkdir -p ${CURDIR}/debian/%s/usr/share/locale-langpack/%s/LC_MESSAGES\n'%(APP,lan))
	fl.close()
	f.write('\t# End create languages directories\n')
	####################################################################
	f.write('\t# Compile languages\n')
	file_txt =os.path.join(LANGUAGES_DIR,'languages.txt')
	fl = open(file_txt,'r')
	for lan in fl.readlines():
		lan = lan[:-1]
		f.write('\tmsgfmt template1/%s.po -o ${CURDIR}/debian/%s/usr/share/locale-langpack/%s/LC_MESSAGES/%s.mo\n'%(lan,APP,lan,APP))
	fl.close()
	f.write('\t# End comile languages\n')
	####################################################################
	f.write('\t# Build architecture-independent files here.\n')
	f.write('binary-indep: build install\n')
	f.write('\t# We have nothing to do by default.\n')
	f.write('\t# Build architecture-dependent files here.\n')
	f.write('binary-arch: build install\n')
	f.write('\tdh_testdir\n')
	f.write('\tdh_testroot\n')
	f.write('\tdh_installchangelogs\n')
	f.write('\tdh_installdocs\n')
	f.write('\tdh_installexamples\n')
	f.write('\t# dh_install\n')
	f.write('\t# dh_installmenu\n')
	f.write('\t# dh_installdebconf\n')
	f.write('\t# dh_installlogrotate\n')
	f.write('\t# dh_installemacsen\n')
	f.write('\t# dh_installpam\n')
	f.write('\t# dh_installmime\n')
	f.write('\t# dh_python\n')
	f.write('\t# dh_installinit\n')
	f.write('\t# dh_installcron\n')
	f.write('\t# dh_installinfo\n')
	f.write('\tdh_installman\n')
	f.write('\tdh_link\n')
	f.write('\tdh_strip\n')
	f.write('\tdh_compress\n')
	f.write('\tdh_fixperms\n')
	f.write('\t# dh_perl\n')
	f.write('\t# dh_makeshlibs\n')
	f.write('\tdh_installdeb\n')
	f.write('\tdh_shlibdeps\n')
	f.write('\tdh_gencontrol\n')
	f.write('\tdh_md5sums\n')
	f.write('\tdh_builddeb\n')
	f.write('binary: binary-indep binary-arch\n')
	f.write('.PHONY: build clean binary-indep binary-arch binary install configure\n')
	f.close()
	os.chmod(file,0777)
	
def create_compat(file):
	if os.path.exists(file):
		os.remove(file)
	f = open(file,'w')
	f.write('7\n')
	f.close()

def create_control_launchpad(file):
	if os.path.exists(file):
		os.remove(file)
	f = open(file,'w')
	f.write('Source: %s\n'%APP)	
	f.write('Section: %s\n'%SECTION)
	f.write('Priority: %s\n'%PRIORITY)
	f.write('Maintainer: %s <%s>\n'%(AUTHOR,AUTHOR_EMAIL))
	f.write('Build-Depends: debhelper (>= 7.0.50~)\n')
	f.write('Standards-Version: 3.8.4\n')
	f.write('Homepage: %s\n'%HOMEPAGE)
	f.write('\n')
	f.write('Package: %s\n'%APP)
	f.write('Architecture: %s\n'%ARCHITECTURE)
	f.write('Depends: %s\n'%DEPENDS)
	f.write('Description: %s\n'%DESCRIPTION)
	f.close()

def create_control(file):
	if os.path.exists(file):
		os.remove(file)
	f = open(file,'w')
	f.write('Source: %s\n'%APP)	
	f.write('Package: %s\n'%APP)
	f.write('Version: %s\n'%VERSION)
	f.write('Section: %s\n'%SECTION)
	f.write('Build-Depends: debhelper (>= 7.0.50~)\n')
	f.write('Standards-Version: 3.8.4\n')
	f.write('Priority: %s\n'%PRIORITY)
	f.write('Architecture: %s\n'%ARCHITECTURE)
	f.write('Depends: %s\n'%DEPENDS)
	f.write('Maintainer: %s <%s>\n'%(AUTHOR,AUTHOR_EMAIL))
	f.write('Description: %s\n'%DESCRIPTION)
	f.write('Homepage: %s\n'%HOMEPAGE)
	f.close()
def create_launcher(file):
	delete_it(file)
	f = open(file,'w')
	f.write('[Desktop Entry]\n')
	f.write('Name=%s\n'%APPNAME)
	f.write('Version=%s\n'%VERSION)
	f.write('Exec=/usr/share/%s/%s.py\n'%(APP,APP))
	f.write('Comment=%s\n'%(APPNAME))
	f.write('Icon=/usr/share/pixmaps/%s\n'%(ICON))
	f.write('Type=Application\n')
	f.write('Terminal=false\n')
	f.write('StartupNotify=true\n')
	f.write('Encoding=UTF-8\n')
	f.write('Categories=%s\n'%(CATEGORIES))
def edit_mkr():
	file_build = os.path.join(MAIN_DIR,'build.mkr')
	fb = open(file_build,'r')
	lines = fb.readlines()
	fb.close()
	fb = open(file_build,'w')
	i = 0
	while(i<len(lines) and lines[i] != '# Structure and source files\n'):
		fb.write(lines[i])
		i+=1
	fb.write('# Structure and source files\n')
	files = list_directories_to_package(SRC_DIR)
	fb.write('mkdir -p {MOUNT_DIR}/usr/share/%s\n'%(APP))
	for file in files:
		file = os.path.relpath(file,SRC_DIR)
		fb.write('mkdir -p {MOUNT_DIR}/usr/share/%s/%s\n'%(APP,file))
	fb.write('#######################################################\n')	
	fb.write('cp src/*.py {MOUNT_DIR}/usr/share/%s/\n'%(APP))
	for file in files:
		if len(glob.glob(os.path.join(file,'*.py')))>0:
			file = os.path.relpath(file,SRC_DIR)
			fb.write('cp src/%s/*.py {MOUNT_DIR}/usr/share/%s/%s/\n'%(file,APP,file))
	fb.close()	

def create_deb():
	folder_build = os.path.join(MAIN_DIR,'build/')
	folder_debian = os.path.join(folder_build,'debian/')
	folder_DEBIAN = os.path.join(folder_debian,'DEBIAN/')
	folder_dist = os.path.join(MAIN_DIR,'dist/')
	if os.path.exists(folder_build):
		shutil.rmtree(folder_build)
	if os.path.exists(folder_dist):
		shutil.rmtree(folder_dist)
	os.mkdir(folder_build)
	os.mkdir(folder_debian)
	os.mkdir(folder_DEBIAN)
	os.mkdir(folder_dist)
	control_file = os.path.join(folder_DEBIAN,'control')
	create_control(control_file)
	file_build = os.path.join(MAIN_DIR,'build.mkr')
	if os.path.exists('make_deb'):
		os.remove('make_deb')
	fdeb = open('make_deb','w')
	fdeb.write('#!/bin/bash\n')
	fdeb.write('DIR="$(pwd)"\n')
	fdeb.write('PWD="$(cd ${0%/*}/;pwd)"\n')
	fb = open(file_build,'r')
	for ln in fb.readlines():
		ln = ln.replace('{MOUNT_DIR}',folder_debian[:-1])
		ln = ln.replace('cp ','cp '+MAIN_DIR+'/')
		fdeb.write(ln)
	fb.close()
	#
	fdeb.write('# Create languages directories\n')
	list_languages()
	file_txt =os.path.join(LANGUAGES_DIR,'languages.txt')
	f = open(file_txt,'r')
	for lan in f.readlines():
		lan = lan[:-1]
		fdeb.write('mkdir -p %s/usr/share/locale-langpack/%s/LC_MESSAGES\n'%(folder_debian,lan))
	f.close()
	fdeb.write('# End create languages directories\n')	
	#
	#
	fdeb.write('# Compile languages\n')
	file_txt =os.path.join(LANGUAGES_DIR,'languages.txt')
	f = open(file_txt,'r')
	for lan in f.readlines():
		lan = lan[:-1]
		fdeb.write('msgfmt '+LANGUAGES_DIR+'/%s.po -o %s/usr/share/locale-langpack/%s/LC_MESSAGES/%s.mo\n'%(lan,folder_debian,lan,APP))
	f.close()
	fdeb.write('# End comile languages\n')
	#
	#fdeb.write('sudo chown -R root:root $PWD/build/debian\n')
	#fdeb.write('sudo chmod -R 755 $PWD/build/debian\n')
	fdeb.write('[ -d $PWD/dist ] || mkdir -p $PWD/dist\n')
	fdeb.write('dpkg-deb --build $PWD/build/debian $PWD/dist/%s-%s.deb\n'%(APP,VERSION))
	#fdeb.write('sudo chown -R $USER:$USER $PWD/build/debian\n')
	fdeb.write('cd $DIR\n')
	fdeb.close()
	os.chmod('make_deb',0777)
	print 'Press Return....'
	print ejecuta('./make_deb')
	os.remove('make_deb')

def delete_it(file):
	if os.path.exists(file):
		if os.path.isdir(file):
			shutil.rmtree(file)
		else:
			os.remove(file)
def remove_builds():
	folder = os.path.join(MAIN_DIR,APP+'-'+VERSION)
	diff = os.path.join(MAIN_DIR,APP+'_'+VERSION+'-1ubuntu1.diff.gz')
	dsc = os.path.join(MAIN_DIR,APP+'_'+VERSION+'-1ubuntu1.dsc')
	build = os.path.join(MAIN_DIR,APP+'_'+VERSION+'-1ubuntu1_source.build')
	changes = os.path.join(MAIN_DIR,APP+'_'+VERSION+'-1ubuntu1_source.changes')
	orig = os.path.join(MAIN_DIR,APP+'_'+VERSION+'.orig.tar.gz')
	upload =os.path.join(MAIN_DIR,APP+'_'+VERSION+'-1ubuntu1_source.ppa.upload')
	delete_it(folder)
	delete_it(diff)
	delete_it(dsc)
	delete_it(build)
	delete_it(changes)
	delete_it(orig)
	delete_it(upload)
	#
	folder_build = os.path.join(MAIN_DIR,'build/')
	folder_dist = os.path.join(MAIN_DIR,'dist/')
	delete_it(folder_build)
	delete_it(folder_dist)

def babilon():
	print '############################################################'
	print 'Parent dir -> %s'%MAIN_DIR
	print 'Languages dir -> %s'%LANGUAGES_DIR
	print 'Source dir -> %s'%SRC_DIR
	print '############################################################'
	print 'Updating template'
	print '############################################################'
	files_file = list_src()	
	command = 'xgettext --msgid-bugs-address=%s --language=Python --keyword=_ --keyword=N_ --output=%s --files-from=%s'%(AUTHOR_EMAIL,TEMPLATE,files_file)
	print ejecuta(command)
	delete_it(files_file)
	print '############################################################'
	print 'List languages'
	print '############################################################'
	#
	list_languages()
	#
	print '############################################################'
	print 'Updating translations'
	print '############################################################'
	update_translations()
	print '############################################################'
	print 'Removing security copies'
	print '############################################################'
	remove_security_copies()	
	
if __name__ == '__main__':
	args = sys.argv
	options = ['-clean','-babilon','-deb','-build','-dput','-list','-temp']
	if len(args)<2 or not args[1] in options:
		print 'Options:	'
		print '\t-clean   \t remove builds'
		print '\t-babilon \t update translations'
		print '\t-deb     \t create debian package'
		print '\t-build   \t create files to upload to Launchpad'
		print '\t-dput    \t create files and upload to Launchpad'
		print '\t-list    \t list directories in source directory'
		exit(-1)
	if args[1] == '-clean':
		print '############################################################'
		print 'Removing builds'
		print '############################################################'
		remove_builds()
	elif args[1] == '-list':
		delete_it('directories.txt')
		files = list_directories_to_package(SRC_DIR)
		f = open('directories.txt','w')
		for file in files:
			file = os.path.relpath(file,SRC_DIR)
			f.write('mkdir -p {MOUNT_DIR}/usr/share/%s/%s\n'%(APP,file))
		f.write('#######################################################\n')	
		for file in files:
			if len(glob.glob(os.path.join(file,'*.py')))>0:
				file = os.path.relpath(file,SRC_DIR)
				f.write('cp %s/*.py {MOUNT_DIR}/usr/share/%s/%s/\n'%(file,APP,file))
		f.close()
		edit_mkr()
	elif args[1] == '-babilon':
		babilon()
	elif args[1] == '-build':
		print '############################################################'
		print 'Removing compiled files'
		print '############################################################'
		remove_compiled_files(SRC_DIR)
		print '############################################################'
		print 'Removing language saved files'
		print '############################################################'
		remove_languages_saved_files(LANGUAGES_DIR)
		print '############################################################'
		print 'Creating tar file'
		print '############################################################'
		create_tar_gz()
		print '############################################################'
		print 'Creating package'
		print '############################################################'
		create_package()
		print '############################################################'
		print 'Creating builds'
		print '############################################################'
		debuild()
	elif args[1] == '-dput':
		print '############################################################'
		print 'Put changes in ppa'
		print '############################################################'
		dput()
	if args[1] == '-temp':
		#create_rules('prueba')
		fr = open(os.path.join(DEBIAN_DIR,'changelog'),'r')
		fw = open('rules_mod','w')
		for line in fr.readlines():
			fw.write("f.write('%s\\n')\n"%line[:-1])
		fw.close
		fr.close
	if args[1] == '-deb':
		print '############################################################'
		print 'Making debian package'
		print '############################################################'
		edit_mkr()
		create_deb()
	exit(0)
	
